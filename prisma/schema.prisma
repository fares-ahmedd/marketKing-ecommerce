// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())
  email String @unique
  password String
  firstName String
  lastName String
  profileImage String
  cart Cart?
  favoriteProducts FavoriteProduct[]
  orders Order[]
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  productId String
  quantity  Int
  price Int
  discount Int
  imageString String
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}
model Product {
  id String @id @default(uuid())
  name String
  description String
  status ProductStatus
  price Int
  discount Int
  images String[]
  category Category
  isFeatured Boolean @default(false)
  favoritedBy FavoriteProduct[]
  createdAt DateTime @default(now())
}

model FavoriteProduct {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}


model Banner {
  id String @id @default(uuid())
  title String 
  imageString String

  createdAt DateTime @default(now())
}

model Order {
  id String @id @default(uuid())
  status String @default("pending")
  amount Int

  User User? @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}

enum ProductStatus {
  draft
  published
  archived
}
enum Category {
  laptops
  phones
  watches
}